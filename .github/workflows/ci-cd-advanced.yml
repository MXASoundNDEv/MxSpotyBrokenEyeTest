name: 🚀 MxSpoty BlindTest - CI/CD Pipeline

on:
  push:
    branches: [ main, Mobile, develop, RunTest ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  pull_request:
    branches: [ main, Mobile ]
  schedule:
    # Tests de régression quotidiens à 2h du matin
    - cron: '0 2 * * *'

env:
  NODE_VERSION_MATRIX: '["18.x", "20.x", "22.x"]'
  CACHE_VERSION: v1

jobs:
  # 🔍 Analyse de qualité de code et sécurité
  quality:
    name: 🔍 Qualité & Sécurité
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: 📦 Cache node_modules
      id: cache
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-
          ${{ runner.os }}-node-

    - name: 📦 Installation des dépendances
      if: steps.cache.outputs.cache-hit != 'true'
      run: npm ci --prefer-offline --no-audit

    - name: 🔍 Analyse ESLint
      run: npm run lint || true
      continue-on-error: true

    - name: 🎨 Vérification format Prettier
      run: npm run format:check || true
      continue-on-error: true

    - name: 🔒 Audit de sécurité npm
      run: |
        npm audit --audit-level moderate --json > security-report.json || true
        npm run security || true

    - name: 📊 Analyse des dépendances
      run: |
        npm ls --depth=0 > dependencies-report.txt || true
        npx license-checker --json > licenses-report.json || true

    - name: 📋 Upload des rapports d'analyse
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports
        path: |
          security-report.json
          dependencies-report.txt
          licenses-report.json
        retention-days: 30

  # 🧪 Tests unitaires avec matrice Node.js
  unit-tests:
    name: 🧪 Tests Unitaires (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
      fail-fast: false

    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: 📦 Restauration cache node_modules
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-
          ${{ runner.os }}-node-

    - name: 📦 Installation des dépendances
      run: npm ci --prefer-offline --no-audit

    - name: 🧪 Tests unitaires avec couverture
      run: npm run test:coverage
      env:
        NODE_ENV: test
        CI: true

    - name: 📊 Upload couverture Codecov
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: 📋 Upload rapports de test
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-node-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml
        retention-days: 30

  # 🔗 Tests d'intégration API
  integration-tests:
    name: 🔗 Tests Intégration API
    runs-on: ubuntu-latest
    needs: [quality, unit-tests]
    
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: 📦 Restauration cache node_modules
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}

    - name: 📦 Installation des dépendances
      run: npm ci --prefer-offline --no-audit

    - name: 🚀 Démarrage serveur de test
      run: |
        npm run start &
        echo $! > server.pid
        # Attente du démarrage avec health check
        for i in {1..30}; do
          if curl -sf http://localhost:3000/health > /dev/null 2>&1; then
            echo "✅ Serveur démarré et ready"
            break
          fi
          echo "⏳ Attente du serveur... ($i/30)"
          sleep 2
        done
      env:
        PORT: 3000
        NODE_ENV: test
        SPOTIFY_CLIENT_ID: 'test_client_id'
        SPOTIFY_CLIENT_SECRET: 'test_client_secret'
        SPOTIFY_REDIRECT_URI: 'http://localhost:3000/callback'

    - name: 🧪 Tests d'intégration
      run: |
        npm run test:integration
        npm run test:basic
        npm run test:metrics
      env:
        NODE_ENV: test
        API_BASE_URL: 'http://localhost:3000'

    - name: 🛑 Arrêt du serveur
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

    - name: 📋 Upload rapports d'intégration
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          tests/test-results.json
          integration-report.json
        retention-days: 30

  # 🎵 Tests End-to-End avec API Spotify
  e2e-spotify-tests:
    name: 🎵 Tests E2E Spotify
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: 📦 Restauration cache node_modules
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}

    - name: 📦 Installation des dépendances
      run: npm ci --prefer-offline --no-audit

    - name: 🚀 Démarrage serveur complet
      run: |
        npm run start &
        echo $! > server.pid
        # Attente avec vérification santé étendue
        for i in {1..45}; do
          if curl -sf http://localhost:3000/health > /dev/null 2>&1 && 
             curl -sf http://localhost:3000/api/health > /dev/null 2>&1; then
            echo "✅ Serveur et API ready"
            break
          fi
          echo "⏳ Attente serveur complet... ($i/45)"
          sleep 2
        done
      env:
        PORT: 3000
        NODE_ENV: production
        SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
        SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
        SPOTIFY_REDIRECT_URI: 'http://localhost:3000/callback'

    - name: 🎵 Tests E2E complets Spotify
      run: |
        npm run test:e2e
        npm run test:complete
      env:
        NODE_ENV: test
        API_BASE_URL: 'http://localhost:3000'
        E2E_TIMEOUT: 60000

    - name: 🛑 Arrêt du serveur
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

    - name: 📋 Upload rapports E2E
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          tests/test-results.json
          e2e-report.json
          screenshots/
        retention-days: 30

  # 🐳 Tests Docker et Déploiement
  docker-tests:
    name: 🐳 Tests Docker
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4

    - name: 🐳 Build Docker image
      run: |
        docker build -t mxspoty-blindtest:test .
        docker images

    - name: 🧪 Tests conteneur Docker
      run: |
        # Test démarrage conteneur
        docker run -d --name test-container -p 3001:3000 \
          -e NODE_ENV=test \
          -e PORT=3000 \
          mxspoty-blindtest:test

        # Attente démarrage
        sleep 10

        # Test health check
        docker exec test-container curl -f http://localhost:3000/health || exit 1

        # Test arrêt propre
        docker stop test-container
        docker rm test-container

    - name: 🔍 Analyse sécurité image Docker
      run: |
        # Scan de vulnérabilités (optionnel)
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image mxspoty-blindtest:test || true

  # ⚡ Tests de performance
  performance-tests:
    name: ⚡ Tests Performance
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: 📦 Installation des dépendances
      run: |
        npm ci --prefer-offline --no-audit
        npm install -g autocannon

    - name: 🚀 Démarrage serveur pour perf
      run: |
        npm run start &
        echo $! > server.pid
        sleep 10
      env:
        PORT: 3000
        NODE_ENV: production

    - name: ⚡ Tests de charge
      run: |
        # Test page d'accueil
        autocannon -c 10 -d 30 -j http://localhost:3000 > performance-home.json

        # Test API health
        autocannon -c 5 -d 15 -j http://localhost:3000/health > performance-health.json

        # Test API playlists (si secrets disponibles)
        if [ -n "${{ secrets.SPOTIFY_CLIENT_ID }}" ]; then
          autocannon -c 3 -d 10 -j http://localhost:3000/api/health > performance-api.json
        fi

    - name: 🛑 Arrêt du serveur
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

    - name: 📋 Upload rapports performance
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-reports
        path: |
          performance-*.json
        retention-days: 30

  # 📊 Agrégation des résultats
  results-summary:
    name: 📊 Résumé des Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, docker-tests]
    if: always()
    
    steps:
    - name: 📥 Download tous les artifacts
      uses: actions/download-artifact@v4

    - name: 📊 Génération résumé
      run: |
        echo "# 🧪 Résumé des Tests - $(date)" > test-summary.md
        echo "" >> test-summary.md
        
        echo "## 🏁 Statut des Jobs" >> test-summary.md
        echo "- Qualité: ${{ needs.quality.result }}" >> test-summary.md
        echo "- Tests Unitaires: ${{ needs.unit-tests.result }}" >> test-summary.md  
        echo "- Tests Intégration: ${{ needs.integration-tests.result }}" >> test-summary.md
        echo "- Tests Docker: ${{ needs.docker-tests.result }}" >> test-summary.md
        
        if [ -d "e2e-test-results" ]; then
          echo "- Tests E2E Spotify: ${{ needs.e2e-spotify-tests.result }}" >> test-summary.md
        fi
        
        if [ -d "performance-reports" ]; then
          echo "- Tests Performance: ${{ needs.performance-tests.result }}" >> test-summary.md
        fi
        
        echo "" >> test-summary.md
        echo "## 📈 Métriques" >> test-summary.md
        
        # Compter les fichiers de test
        find . -name "*test-results*" -type f | wc -l > test-count.txt
        echo "- Nombre de suites de tests: $(cat test-count.txt)" >> test-summary.md
        
        cat test-summary.md

    - name: 📋 Upload résumé final
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md
        retention-days: 90
