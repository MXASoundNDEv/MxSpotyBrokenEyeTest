/**
 * Script de test pour la fonctionnalit√© de rafra√Æchissement du token
 */

console.log('üß™ Test de la fonctionnalit√© de rafra√Æchissement du token');

// Test 1: V√©rification de la route refresh-token
async function testRefreshTokenRoute() {
    console.log('\nüìã Test 1: Route /api/refresh-token');
    
    try {
        const response = await fetch('http://localhost:3000/api/refresh-token', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ refresh_token: 'test_token' })
        });
        
        if (response.status === 400) {
            console.log('‚úÖ Route accessible - erreur attendue pour token invalide');
        } else {
            console.log('üìä Status:', response.status);
            const data = await response.json();
            console.log('üìä Response:', data);
        }
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error.message);
    }
}

// Test 2: V√©rification de la route playlists avec un token invalide
async function testPlaylistsWithInvalidToken() {
    console.log('\nüìã Test 2: Route /api/me/playlists avec token invalide');
    
    try {
        const response = await fetch('http://localhost:3000/api/me/playlists?token=invalid_token');
        
        console.log('üìä Status:', response.status);
        const data = await response.json();
        console.log('üìä Response:', data);
        
        if (response.status === 401 && data.needsReauth) {
            console.log('‚úÖ Gestion d\'erreur token invalide fonctionnelle');
        }
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error.message);
    }
}

// Test 3: V√©rification de la route playlists sans token
async function testPlaylistsWithoutToken() {
    console.log('\nüìã Test 3: Route /api/me/playlists sans token');
    
    try {
        const response = await fetch('http://localhost:3000/api/me/playlists');
        
        console.log('üìä Status:', response.status);
        const data = await response.json();
        console.log('üìä Response:', data);
        
        if (response.status === 400 && data.error === 'Token requis') {
            console.log('‚úÖ Validation token manquant fonctionnelle');
        }
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error.message);
    }
}

// Ex√©cuter tous les tests
async function runAllTests() {
    console.log('üöÄ D√©but des tests...\n');
    
    await testRefreshTokenRoute();
    await testPlaylistsWithInvalidToken();
    await testPlaylistsWithoutToken();
    
    console.log('\n‚úÖ Tests termin√©s');
}

// V√©rifier si nous sommes dans Node.js ou dans le navigateur
if (typeof window === 'undefined') {
    // Node.js - utiliser dynamic import pour fetch
    import('node-fetch').then(({ default: fetch }) => {
        globalThis.fetch = fetch;
        runAllTests();
    }).catch(() => {
        console.log('‚ö†Ô∏è node-fetch non disponible, utilisez ce script dans le navigateur');
    });
} else {
    // Navigateur
    runAllTests();
}
