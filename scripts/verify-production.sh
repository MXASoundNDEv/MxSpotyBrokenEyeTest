#!/bin/bash

# Script de v√©rification pr√©-d√©ploiement
# Usage: ./scripts/verify-production.sh

set -euo pipefail

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }

ERRORS=0

check_file() {
    local file="$1"
    local desc="$2"
    
    if [[ -f "$file" ]]; then
        log_success "‚úÖ $desc: $file"
    else
        log_error "‚ùå $desc manquant: $file"
        ((ERRORS++))
    fi
}

check_directory() {
    local dir="$1"
    local desc="$2"
    
    if [[ -d "$dir" ]]; then
        log_success "‚úÖ $desc: $dir"
    else
        log_error "‚ùå $desc manquant: $dir"
        ((ERRORS++))
    fi
}

check_executable() {
    local file="$1"
    local desc="$2"
    
    if [[ -x "$file" ]]; then
        log_success "‚úÖ $desc ex√©cutable: $file"
    else
        log_error "‚ùå $desc non ex√©cutable: $file"
        ((ERRORS++))
    fi
}

echo "üîç V√©rification de la configuration de production..."
echo ""

# V√©rifier les fichiers essentiels
log_info "V√©rification des fichiers de configuration..."
check_file "docker-compose.yml" "Docker Compose"
check_file "Dockerfile" "Dockerfile"
check_file "package.json" "Package.json"
check_file ".env.production" "Exemple d'environnement production"
check_file "nginx/conf.d/app.conf" "Configuration Nginx"

echo ""

# V√©rifier les r√©pertoires
log_info "V√©rification des r√©pertoires..."
check_directory "scripts" "Scripts de d√©ploiement"
check_directory "nginx" "Configuration Nginx"
check_directory "src" "Code source"

echo ""

# V√©rifier les scripts
log_info "V√©rification des scripts..."
check_executable "scripts/deploy-production.sh" "Script de d√©ploiement"
check_executable "scripts/setup-ssl.sh" "Script SSL"
check_executable "scripts/maintenance.sh" "Script de maintenance"

echo ""

# V√©rifier le fichier .env
log_info "V√©rification du fichier .env..."
if [[ -f ".env" ]]; then
    source .env
    
    # Variables critiques
    vars=("SPOTIFY_CLIENT_ID" "SPOTIFY_CLIENT_SECRET" "DOMAIN" "EMAIL")
    for var in "${vars[@]}"; do
        if [[ -n "${!var:-}" ]] && [[ "${!var}" != "your_"* ]] && [[ "${!var}" != "yourdomain.com" ]]; then
            log_success "‚úÖ Variable $var configur√©e"
        else
            log_error "‚ùå Variable $var non configur√©e ou utilise une valeur par d√©faut"
            ((ERRORS++))
        fi
    done
else
    log_warn "‚ö†Ô∏è  Fichier .env manquant. Il sera cr√©√© depuis .env.production lors du d√©ploiement"
fi

echo ""

# V√©rifier la configuration Nginx
log_info "V√©rification de la configuration Nginx..."
if grep -q "DOMAIN_PLACEHOLDER" nginx/conf.d/app.conf 2>/dev/null; then
    log_warn "‚ö†Ô∏è  Placeholder du domaine d√©tect√© dans nginx/conf.d/app.conf (sera remplac√© automatiquement)"
else
    log_success "‚úÖ Configuration Nginx semble correcte"
fi

echo ""

# V√©rifier les d√©pendances syst√®me
log_info "V√©rification des d√©pendances syst√®me..."

if command -v podman &> /dev/null; then
    log_success "‚úÖ Podman install√©: $(podman --version)"
else
    log_error "‚ùå Podman non install√©"
    ((ERRORS++))
fi

if command -v podman-compose &> /dev/null; then
    log_success "‚úÖ Podman-compose disponible"
else
    log_warn "‚ö†Ô∏è  Podman-compose non trouv√©. Il sera install√© automatiquement"
fi

if command -v curl &> /dev/null; then
    log_success "‚úÖ Curl install√©"
else
    log_warn "‚ö†Ô∏è  Curl non install√©. Il sera install√© automatiquement"
fi

echo ""

# V√©rifier la syntaxe du docker-compose
log_info "V√©rification de la syntaxe docker-compose..."
if podman-compose config &>/dev/null || docker-compose config &>/dev/null; then
    log_success "‚úÖ Docker-compose.yml syntaxiquement correct"
else
    log_error "‚ùå Erreur de syntaxe dans docker-compose.yml"
    ((ERRORS++))
fi

echo ""

# Test de build (optionnel)
if [[ "${1:-}" == "--test-build" ]]; then
    log_info "Test de build de l'image..."
    if podman build -t blindtest-test . &>/dev/null; then
        log_success "‚úÖ Build de l'image r√©ussie"
        podman rmi blindtest-test &>/dev/null || true
    else
        log_error "‚ùå √âchec du build de l'image"
        ((ERRORS++))
    fi
fi

echo ""

# R√©sum√© final
if [[ $ERRORS -eq 0 ]]; then
    log_success "üéâ Toutes les v√©rifications sont pass√©es!"
    log_info "Pr√™t pour le d√©ploiement:"
    echo "  1. Configurez le fichier .env avec vos vraies valeurs"
    echo "  2. Lancez: ./scripts/deploy-production.sh"
    echo "  3. Configurez SSL: ./scripts/setup-ssl.sh"
    exit 0
else
    log_error "‚ùå $ERRORS erreur(s) d√©tect√©e(s). Corrigez-les avant le d√©ploiement."
    exit 1
fi
