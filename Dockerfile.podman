# üê≥ Dockerfile optimis√© pour Podman sur Ubuntu 24.04
# Multi-stage build pour optimisation de taille et s√©curit√©

# ==========================================
# Stage 1: Builder - Installation d√©pendances
# ==========================================
FROM docker.io/library/node:20-alpine AS builder

# M√©tadonn√©es
LABEL maintainer="MxSpoty BlindTest Team"
LABEL description="Spotify-powered blind test game - Builder stage"
LABEL ubuntu-target="24.04"
LABEL podman-optimized="true"

# Variables d'environnement pour le build
ENV NODE_ENV=production
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NPM_CONFIG_AUDIT=false

# Installation des outils syst√®me n√©cessaires
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    curl \
    git

# Cr√©ation utilisateur non-root pour s√©curit√©
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# R√©pertoire de travail
WORKDIR /app

# Copie des fichiers de d√©pendances
COPY package*.json ./

# Installation des d√©pendances avec optimisations
RUN npm ci --only=production --prefer-offline --no-audit && \
    npm cache clean --force

# ==========================================
# Stage 2: Runner - Image finale optimis√©e  
# ==========================================
FROM docker.io/library/node:20-alpine AS runner

# M√©tadonn√©es √©tendues
LABEL org.opencontainers.image.title="MxSpoty BlindTest"
LABEL org.opencontainers.image.description="Spotify-powered blind test game optimized for Podman"
LABEL org.opencontainers.image.vendor="MxSpoty Team"
LABEL org.opencontainers.image.licenses="GPL-3.0"
LABEL org.opencontainers.image.url="https://github.com/MXASoundNDEv/MxSpotyBrokenEyeTest"
LABEL org.opencontainers.image.documentation="https://github.com/MXASoundNDEv/MxSpotyBrokenEyeTest/blob/main/README.md"

# Variables d'environnement de production
ENV NODE_ENV=production
ENV PORT=3000
ENV HOST=0.0.0.0
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV DEBIAN_FRONTEND=noninteractive

# Installation des outils syst√®me minimum requis
RUN apk add --no-cache \
    curl \
    ca-certificates \
    tini \
    dumb-init && \
    # Mise √† jour des certificats CA
    update-ca-certificates

# Cr√©ation utilisateur non-root avec UID/GID sp√©cifiques pour Podman
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 -G nodejs

# R√©pertoire de travail
WORKDIR /app

# Copie des node_modules depuis le builder
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copie du code source avec permissions appropri√©es
COPY --chown=nodejs:nodejs . .

# Configuration sp√©cifique Podman/Ubuntu
RUN mkdir -p /app/logs /app/tmp /app/data && \
    chown -R nodejs:nodejs /app && \
    chmod -R 755 /app && \
    # Optimisation pour Podman rootless
    chmod +x scripts/*.sh 2>/dev/null || true

# Exposition du port
EXPOSE $PORT

# Configuration de sant√© pour containers
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Basculement vers l'utilisateur non-root
USER nodejs

# Point d'entr√©e avec init system pour signaux
ENTRYPOINT ["dumb-init", "--"]

# Commande par d√©faut
CMD ["node", "src/server/index.js"]

# ==========================================
# Optimisations sp√©cifiques Podman
# ==========================================

# 1. Multi-stage build pour r√©duction de taille
# 2. Utilisateur non-root pour s√©curit√©
# 3. Health check int√©gr√©
# 4. Init system pour gestion signaux
# 5. Permissions optimis√©es pour rootless
# 6. Labels OCI complets
# 7. Cache layers optimis√©
